///////////////////////////////////////////////////////////////////////////////////////////////////
//
// Jackal Engine
// 2017 - Benjamin Carter (bencarterdev@outlook.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgement
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __JACKAL_GUI_TEXTURE_FACTORY_HPP__
#define __JACKAL_GUI_TEXTURE_FACTORY_HPP__

//====================
// Additional includes
//==================== 
#include <Awesomium/Surface.h> // Using Awesomium to create a factory for gui surfaces.

namespace jackal
{
	class GUITextureFactory : public Awesomium::SurfaceFactory
	{
	public:
		//====================
		// Ctor and dtor 
		//==================== 
		////////////////////////////////////////////////////////////
		/// @brief Default constructor for the GUITextureFactory object.
		///
		/// When the constructor is called, it will call the parent
		/// SurfaceFactory constructor and make the object ready for
		/// use.
		///
		////////////////////////////////////////////////////////////
		explicit GUITextureFactory();

		////////////////////////////////////////////////////////////
		// @brief Default destructor for the GUITextureFactory object.
		////////////////////////////////////////////////////////////
		~GUITextureFactory() = default;

		//==================== 
		// Methods
		//====================
		////////////////////////////////////////////////////////////
		/// @brief Overriden create method for the factory.
		///
		/// This method overrides the behavior of its parent to allow
		/// for modular behavior. When this method is invoked, it will
		/// create a new GUITexture object and set the width and height
		/// of the surface depending on the size of the WebView previously
		/// specified. 
		///
		/// @param pView   The current view of the Awesomium WebCore.
		/// @param width   The width of the view and the width to set the texture to.
		/// @param height  The height of the view and the height to set the texture to.
		///
		/// @returns       The GUITexture generated by the factory.
		///
		////////////////////////////////////////////////////////////
		Awesomium::Surface* CreateSurface(Awesomium::WebView* pView, int width, int height) override;

		////////////////////////////////////////////////////////////
		/// @brief Destroys a surface allocated by the factory.
		///
		/// When a surface is no longer needed, this method will be invoked
		/// to destroy a surface and free the memory for additional use.
		///
		/// @param pSurface The surface to destroy and de-allocate.
		///
		////////////////////////////////////////////////////////////
		void DestroySurface(Awesomium::Surface* pSurface);
	};

} // namespace jackal

#endif//__JACKAL_GUI_TEXTURE_FACTORY_HPP__

////////////////////////////////////////////////////////////
/// @author Benjamin Carter
///
/// @class jackal::GUITextureFactory
/// @ingroup rendering
///
/// The jackal::GUITextureFactory is a factory method that is used
/// to override the default Awesomium factory generation method. This
/// class is used internally by Awesomium to convert surfaces and 
/// return a surface that can be converted to a format that the Jackal
/// Engine can understand and manipulate. 
///
/// Due to the internal use of the class, it is not exposed to the
/// lua scripting interface. No code example is provided due to it being
/// used and manipulated by Awesomium.
///
////////////////////////////////////////////////////////////